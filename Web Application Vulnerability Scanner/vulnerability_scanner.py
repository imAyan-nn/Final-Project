import requests
from bs4 import BeautifulSoup
import re
import urllib.parse
from flask import Flask, render_template, request, jsonify
import json
from datetime import datetime
import threading
import time

class VulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.vulnerabilities = []
        
        # Common XSS payloads
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "';alert('XSS');//",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "'\"><script>alert('XSS')</script>"
        ]
        
        # Common SQL injection payloads
        self.sqli_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "'; DROP TABLE users;--",
            "' UNION SELECT NULL,NULL,NULL--",
            "admin'--",
            "' OR 'a'='a",
            "1' OR '1'='1' #"
        ]
        
        # CSRF detection patterns
        self.csrf_patterns = [
            r'<form[^>]*method\s*=\s*["\']post["\'][^>]*>',
            r'<input[^>]*type\s*=\s*["\']hidden["\'][^>]*name\s*=\s*["\']csrf',
            r'<meta[^>]*name\s*=\s*["\']csrf-token["\']'
        ]
        
    def log_vulnerability(self, vuln_type, url, payload=None, evidence=None, severity="Medium"):
        """Log discovered vulnerability with details"""
        vuln = {
            'type': vuln_type,
            'url': url,
            'payload': payload,
            'evidence': evidence,
            'severity': severity,
            'timestamp': datetime.now().isoformat()
        }
        self.vulnerabilities.append(vuln)
        print(f"[{severity}] {vuln_type} found at {url}")
        
    def crawl_forms(self, url):
        """Crawl and extract forms from a webpage"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.text, 'html.parser')
            forms = []
            
            for form in soup.find_all('form'):
                form_data = {
                    'action': form.get('action', ''),
                    'method': form.get('method', 'GET').upper(),
                    'inputs': []
                }
                
                for input_tag in form.find_all(['input', 'textarea', 'select']):
                    input_data = {
                        'name': input_tag.get('name', ''),
                        'type': input_tag.get('type', 'text'),
                        'value': input_tag.get('value', '')
                    }
                    form_data['inputs'].append(input_data)
                    
                forms.append(form_data)
                
            return forms, response.text
        except Exception as e:
            print(f"Error crawling {url}: {e}")
            return [], ""
            
    def test_xss(self, url, forms):
        """Test for XSS vulnerabilities"""
        print(f"Testing XSS on {url}...")
        
        for form in forms:
            for payload in self.xss_payloads:
                try:
                    # Prepare form data
                    form_data = {}
                    for input_field in form['inputs']:
                        if input_field['name']:
                            if input_field['type'] in ['text', 'search', 'email', 'url']:
                                form_data[input_field['name']] = payload
                            else:
                                form_data[input_field['name']] = input_field['value']
                    
                    # Submit form
                    if form['method'] == 'POST':
                        action_url = urllib.parse.urljoin(url, form['action'])
                        response = self.session.post(action_url, data=form_data, timeout=10)
                    else:
                        action_url = urllib.parse.urljoin(url, form['action'])
                        response = self.session.get(action_url, params=form_data, timeout=10)
                    
                    # Check if payload is reflected
                    if payload in response.text:
                        self.log_vulnerability(
                            "XSS (Cross-Site Scripting)",
                            action_url,
                            payload,
                            f"Payload reflected in response",
                            "High"
                        )
                        
                except Exception as e:
                    print(f"Error testing XSS: {e}")
                    
    def test_sqli(self, url, forms):
        """Test for SQL injection vulnerabilities"""
        print(f"Testing SQL Injection on {url}...")
        
        # SQL error patterns
        sql_errors = [
            r"sql syntax.*mysql",
            r"warning.*mysql_",
            r"valid mysql result",
            r"postgresql.*error",
            r"warning.*pg_",
            r"valid postgresql result",
            r"microsoft.*odbc.*sql server",
            r"sqlite.*error"
        ]
        
        for form in forms:
            for payload in self.sqli_payloads:
                try:
                    form_data = {}
                    for input_field in form['inputs']:
                        if input_field['name']:
                            if input_field['type'] in ['text', 'password', 'email']:
                                form_data[input_field['name']] = payload
                            else:
                                form_data[input_field['name']] = input_field['value']
                    
                    if form['method'] == 'POST':
                        action_url = urllib.parse.urljoin(url, form['action'])
                        response = self.session.post(action_url, data=form_data, timeout=10)
                    else:
                        action_url = urllib.parse.urljoin(url, form['action'])
                        response = self.session.get(action_url, params=form_data, timeout=10)
                    
                    # Check for SQL errors
                    for error_pattern in sql_errors:
                        if re.search(error_pattern, response.text, re.IGNORECASE):
                            self.log_vulnerability(
                                "SQL Injection",
                                action_url,
                                payload,
                                f"SQL error detected: {error_pattern}",
                                "Critical"
                            )
                            break
                            
                except Exception as e:
                    print(f"Error testing SQL injection: {e}")
                    
    def test_csrf(self, url, html_content):
        """Test for CSRF vulnerabilities"""
        print(f"Testing CSRF protection on {url}...")
        
        # Check for POST forms without CSRF tokens
        post_forms = re.findall(r'<form[^>]*method\s*=\s*["\']post["\'][^>]*>(.*?)</form>', 
                               html_content, re.IGNORECASE | re.DOTALL)
        
        for form_content in post_forms:
            has_csrf_token = False
            
            # Check for common CSRF token patterns
            for pattern in self.csrf_patterns[1:]:  # Skip the form detection pattern
                if re.search(pattern, form_content, re.IGNORECASE):
                    has_csrf_token = True
                    break
            
            if not has_csrf_token:
                self.log_vulnerability(
                    "CSRF (Cross-Site Request Forgery)",
                    url,
                    None,
                    "POST form found without CSRF protection",
                    "Medium"
                )
                
    def check_security_headers(self, url):
        """Check for missing security headers"""
        print(f"Checking security headers for {url}...")
        
        try:
            response = self.session.head(url, timeout=10)
            headers = response.headers
            
            security_headers = {
                'X-Content-Type-Options': 'nosniff',
                'X-Frame-Options': ['DENY', 'SAMEORIGIN'],
                'X-XSS-Protection': '1; mode=block',
                'Strict-Transport-Security': 'max-age=',
                'Content-Security-Policy': 'default-src'
            }
            
            for header, expected in security_headers.items():
                if header not in headers:
                    self.log_vulnerability(
                        f"Missing Security Header: {header}",
                        url,
                        None,
                        f"Security header {header} is not present",
                        "Low"
                    )
                    
        except Exception as e:
            print(f"Error checking security headers: {e}")
            
    def scan_target(self, target_url):
        """Main scanning function"""
        print(f"Starting scan of {target_url}")
        self.vulnerabilities = []  # Reset vulnerabilities
        
        # Crawl forms and get page content
        forms, html_content = self.crawl_forms(target_url)
        
        if not forms and not html_content:
            print("Failed to crawl target URL")
            return
            
        # Run vulnerability tests
        self.test_xss(target_url, forms)
        self.test_sqli(target_url, forms)
        self.test_csrf(target_url, html_content)
        self.check_security_headers(target_url)
        
        print(f"Scan completed. Found {len(self.vulnerabilities)} potential vulnerabilities.")
        
    def generate_report(self):
        """Generate detailed vulnerability report"""
        if not self.vulnerabilities:
            return {"summary": "No vulnerabilities found", "details": []}
            
        # Group by severity
        critical = [v for v in self.vulnerabilities if v['severity'] == 'Critical']
        high = [v for v in self.vulnerabilities if v['severity'] == 'High']
        medium = [v for v in self.vulnerabilities if v['severity'] == 'Medium']
        low = [v for v in self.vulnerabilities if v['severity'] == 'Low']
        
        report = {
            "summary": {
                "total": len(self.vulnerabilities),
                "critical": len(critical),
                "high": len(high),
                "medium": len(medium),
                "low": len(low)
            },
            "vulnerabilities": self.vulnerabilities
        }
        
        return report

# Flask web interface
app = Flask(__name__)
scanner = VulnerabilityScanner()

@app.route('/')
def index():
    # Return HTML directly instead of using render_template
    return HTML_TEMPLATE

@app.route('/scan', methods=['POST'])
def scan():
    data = request.get_json()
    target_url = data.get('url')
    
    if not target_url:
        return jsonify({"error": "URL is required"}), 400
        
    # Run scan in background thread
    def run_scan():
        scanner.scan_target(target_url)
    
    thread = threading.Thread(target=run_scan)
    thread.start()
    thread.join(timeout=30)  # 30 second timeout
    
    return jsonify({"status": "Scan completed", "url": target_url})

@app.route('/report')
def report():
    report_data = scanner.generate_report()
    return jsonify(report_data)

# HTML template for the web interface
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>Web Vulnerability Scanner</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }
        .container { max-width: 1000px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; text-align: center; margin-bottom: 30px; }
        .scan-form { margin-bottom: 30px; }
        input[type="url"] { width: 60%; padding: 12px; font-size: 16px; border: 1px solid #ddd; border-radius: 4px; }
        button { padding: 12px 24px; font-size: 16px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer; margin-left: 10px; }
        button:hover { background: #0056b3; }
        button:disabled { background: #ccc; cursor: not-allowed; }
        .results { margin-top: 30px; }
        .vulnerability { background: #f8f9fa; border-left: 4px solid #007bff; padding: 15px; margin: 10px 0; border-radius: 0 4px 4px 0; }
        .critical { border-left-color: #dc3545; }
        .high { border-left-color: #fd7e14; }
        .medium { border-left-color: #ffc107; }
        .low { border-left-color: #28a745; }
        .summary { background: #e9ecef; padding: 20px; border-radius: 4px; margin-bottom: 20px; }
        .loading { text-align: center; padding: 20px; }
        .payload { background: #f1f3f4; padding: 5px; border-radius: 3px; font-family: monospace; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔍 Web Application Vulnerability Scanner</h1>
        <p style="text-align: center; color: #666;">Educational tool for testing common web vulnerabilities</p>
        
        <div class="scan-form">
            <input type="url" id="targetUrl" placeholder="https://example.com" required>
            <button onclick="startScan()">Start Scan</button>
        </div>
        
        <div id="results" class="results"></div>
    </div>

    <script>
        async function startScan() {
            const url = document.getElementById('targetUrl').value;
            const resultsDiv = document.getElementById('results');
            const button = document.querySelector('button');
            
            if (!url) {
                alert('Please enter a URL');
                return;
            }
            
            button.disabled = true;
            button.textContent = 'Scanning...';
            resultsDiv.innerHTML = '<div class="loading">🔄 Scanning in progress...</div>';
            
            try {
                const response = await fetch('/scan', {
                    method: 'POST',
                    headers: {'Content-Type': 'application/json'},
                    body: JSON.stringify({url: url})
                });
                
                if (response.ok) {
                    await loadReport();
                } else {
                    throw new Error('Scan failed');
                }
            } catch (error) {
                resultsDiv.innerHTML = '<div class="vulnerability critical">❌ Error: ' + error.message + '</div>';
            } finally {
                button.disabled = false;
                button.textContent = 'Start Scan';
            }
        }
        
        async function loadReport() {
            try {
                const response = await fetch('/report');
                const report = await response.json();
                displayReport(report);
            } catch (error) {
                document.getElementById('results').innerHTML = '<div class="vulnerability critical">❌ Error loading report</div>';
            }
        }
        
        function displayReport(report) {
            const resultsDiv = document.getElementById('results');
            
            if (!report.vulnerabilities || report.vulnerabilities.length === 0) {
                resultsDiv.innerHTML = '<div class="summary">✅ No vulnerabilities found!</div>';
                return;
            }
            
            let html = '<div class="summary">';
            html += '<h3>📊 Scan Summary</h3>';
            html += `<p>Total vulnerabilities found: <strong>${report.summary.total}</strong></p>`;
            if (report.summary.critical > 0) html += `<p>🔴 Critical: ${report.summary.critical}</p>`;
            if (report.summary.high > 0) html += `<p>🟠 High: ${report.summary.high}</p>`;
            if (report.summary.medium > 0) html += `<p>🟡 Medium: ${report.summary.medium}</p>`;
            if (report.summary.low > 0) html += `<p>🟢 Low: ${report.summary.low}</p>`;
            html += '</div>';
            
            html += '<h3>🚨 Vulnerability Details</h3>';
            
            report.vulnerabilities.forEach(vuln => {
                html += `<div class="vulnerability ${vuln.severity.toLowerCase()}">`;
                html += `<h4>${getSeverityIcon(vuln.severity)} ${vuln.type}</h4>`;
                html += `<p><strong>URL:</strong> ${vuln.url}</p>`;
                if (vuln.payload) {
                    html += `<p><strong>Payload:</strong> <span class="payload">${escapeHtml(vuln.payload)}</span></p>`;
                }
                html += `<p><strong>Evidence:</strong> ${vuln.evidence}</p>`;
                html += `<p><strong>Severity:</strong> ${vuln.severity}</p>`;
                html += `<p><strong>Discovered:</strong> ${new Date(vuln.timestamp).toLocaleString()}</p>`;
                html += '</div>';
            });
            
            resultsDiv.innerHTML = html;
        }
        
        function getSeverityIcon(severity) {
            const icons = {
                'Critical': '🔴',
                'High': '🟠', 
                'Medium': '🟡',
                'Low': '🟢'
            };
            return icons[severity] || '⚪';
        }
        
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
    </script>
</body>
</html>
'''



if __name__ == '__main__':
    import os
    import sys
    
    # Windows-specific setup
    if sys.platform == "win32":
        # Disable SSL warnings for Windows
        import urllib3
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        
        # Set console encoding for Windows
        import codecs
        sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
        sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
    
    # Create templates directory
    templates_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'templates')
    os.makedirs(templates_dir, exist_ok=True)
    
    # Write HTML template
    template_path = os.path.join(templates_dir, 'index.html')
    with open(template_path, 'w', encoding='utf-8') as f:
        f.write(HTML_TEMPLATE)
    
    print("=" * 60)
    print("🔍 Web Vulnerability Scanner for Windows")
    print("=" * 60)
    print("Features:")
    print("✓ XSS Detection")
    print("✓ SQL Injection Testing") 
    print("✓ CSRF Protection Check")
    print("✓ Security Headers Analysis")
    print("✓ Web Interface with Detailed Reports")
    print("=" * 60)
    print("\n🌐 Starting Flask server on Windows...")
    print("📱 Access the scanner at: http://localhost:5000")
    print("⚠️  Only scan websites you own or have permission to test!")
    print("\n💡 Press Ctrl+C to stop the server")
    print("-" * 60)
    
    try:
        app.run(debug=False, host='127.0.0.1', port=5000, threaded=True)
    except KeyboardInterrupt:
        print("\n\n🛑 Scanner stopped by user")
    except Exception as e:
        print(f"\n❌ Error starting server: {e}")
        input("Press Enter to exit...")