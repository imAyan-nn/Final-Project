from flask import Flask, request, render_template_string
import sqlite3
import os

app = Flask(__name__)

# Create a simple database
def init_db():
    conn = sqlite3.connect('test.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT,
            password TEXT,
            email TEXT
        )
    ''')
    cursor.execute("INSERT OR IGNORE INTO users VALUES (1, 'admin', 'password123', 'admin@test.com')")
    cursor.execute("INSERT OR IGNORE INTO users VALUES (2, 'user', 'user123', 'user@test.com')")
    conn.commit()
    conn.close()

# HTML template with vulnerabilities
HTML_TEMPLATE = '''
<!DOCTYPE html>
<html>
<head>
    <title>VulnApp - Intentionally Vulnerable Test Application</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .container { background: white; padding: 20px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin: 20px 0; }
        .warning { background: #fff3cd; border: 1px solid #ffc107; padding: 15px; border-radius: 5px; margin: 20px 0; }
        form { background: #f8f9fa; padding: 20px; border-radius: 5px; margin: 15px 0; }
        input, textarea { width: 100%; padding: 10px; margin: 8px 0; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }
        input[type="submit"] { background: #007bff; color: white; border: none; cursor: pointer; }
        .result { background: #e7f3ff; border: 1px solid #b3d9ff; padding: 15px; margin: 15px 0; border-radius: 5px; }
        .error { background: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }
        h1 { color: #d32f2f; text-align: center; }
        h2 { color: #1976d2; border-left: 4px solid #1976d2; padding-left: 15px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>üéØ VulnApp - Vulnerable Test Application</h1>
        <div class="warning">
            <strong>‚ö†Ô∏è WARNING:</strong> This is an intentionally vulnerable application for security testing. 
            NEVER deploy this to a production environment!
        </div>
    </div>

    <!-- XSS Vulnerability -->
    <div class="container">
        <h2>üî¥ XSS Testing Area</h2>
        <form method="GET">
            <label>Search (Vulnerable to XSS):</label>
            <input type="text" name="search" placeholder="Try: <script>alert('XSS')</script>" value="{{ search_term }}">
            <input type="submit" value="Search">
        </form>
        
        {% if search_term %}
        <div class="result">
            <h3>Search Results for: {{ search_term|safe }}</h3>
            <p>You searched for: <strong>{{ search_term|safe }}</strong></p>
        </div>
        {% endif %}
        
        <form method="POST">
            <label>Leave a Comment:</label>
            <textarea name="comment" placeholder="Try XSS payloads here...">{{ comment }}</textarea>
            <input type="submit" name="submit_comment" value="Post Comment">
        </form>
        
        {% if comment %}
        <div class="result">
            <h3>Your Comment:</h3>
            <p>{{ comment|safe }}</p>
        </div>
        {% endif %}
    </div>

    <!-- SQL Injection Vulnerability -->
    <div class="container">
        <h2>üî¥ SQL Injection Testing Area</h2>
        <form method="POST">
            <label>Username (Try: admin'--)</label>
            <input type="text" name="username" placeholder="admin'--" value="{{ username }}">
            
            <label>Password:</label>
            <input type="password" name="password" placeholder="anything">
            
            <input type="submit" name="login" value="Login">
        </form>
        
        {% if login_result %}
        <div class="result {% if 'Error' in login_result %}error{% endif %}">
            <h3>Login Result:</h3>
            <p>{{ login_result|safe }}</p>
        </div>
        {% endif %}
        
        <form method="POST">
            <label>Search Users (Vulnerable to SQL Injection):</label>
            <input type="text" name="user_search" placeholder="Try: ' UNION SELECT 1,2,3,4--" value="{{ user_search }}">
            <input type="submit" name="search_users" value="Search Users">
        </form>
        
        {% if user_search_result %}
        <div class="result {% if 'Error' in user_search_result %}error{% endif %}">
            <h3>User Search Results:</h3>
            <pre>{{ user_search_result|safe }}</pre>
        </div>
        {% endif %}
    </div>

    <!-- CSRF Vulnerability -->
    <div class="container">
        <h2>üü° CSRF Testing Area (No Protection)</h2>
        <p>These forms lack CSRF tokens - vulnerable to Cross-Site Request Forgery</p>
        
        <form method="POST">
            <label>Change Email (No CSRF Protection):</label>
            <input type="email" name="new_email" placeholder="new@example.com">
            <input type="submit" name="change_email" value="Update Email">
        </form>
        
        <form method="POST">
            <label>Transfer Money (No CSRF Protection):</label>
            <input type="number" name="amount" placeholder="100.00">
            <input type="text" name="to_account" placeholder="Target account">
            <input type="submit" name="transfer" value="Transfer">
        </form>
        
        {% if csrf_result %}
        <div class="result">
            <h3>Action Result:</h3>
            <p>{{ csrf_result }}</p>
        </div>
        {% endif %}
    </div>

    <!-- File Upload Vulnerability -->
    <div class="container">
        <h2>üî¥ File Upload (Simulated)</h2>
        <form method="POST">
            <label>Filename:</label>
            <input type="text" name="filename" placeholder="shell.php">
            <label>File Content:</label>
            <textarea name="file_content" placeholder="<?php system($_GET['cmd']); ?>"></textarea>
            <input type="submit" name="upload" value="Upload File">
        </form>
        
        {% if upload_result %}
        <div class="result">
            <h3>Upload Result:</h3>
            <p>{{ upload_result }}</p>
        </div>
        {% endif %}
    </div>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    # Initialize variables
    search_term = request.args.get('search', '')
    comment = request.form.get('comment', '')
    username = request.form.get('username', '')
    login_result = ''
    user_search = request.form.get('user_search', '')
    user_search_result = ''
    csrf_result = ''
    upload_result = ''
    
    # Handle XSS - Comment form
    if request.method == 'POST' and 'submit_comment' in request.form:
        comment = request.form.get('comment', '')
    
    # Handle SQL Injection - Login
    if request.method == 'POST' and 'login' in request.form:
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        
        try:
            conn = sqlite3.connect('test.db')
            cursor = conn.cursor()
            
            # Vulnerable SQL query - directly inserting user input
            query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
            print(f"Executing query: {query}")  # This will show in console
            
            cursor.execute(query)
            result = cursor.fetchone()
            
            if result:
                login_result = f"‚úÖ Login successful! Welcome {result[1]}"
            else:
                login_result = "‚ùå Invalid credentials"
                
            conn.close()
            
        except Exception as e:
            login_result = f"üö® Database Error: {str(e)}"
    
    # Handle SQL Injection - User search
    if request.method == 'POST' and 'search_users' in request.form:
        user_search = request.form.get('user_search', '')
        
        try:
            conn = sqlite3.connect('test.db')
            cursor = conn.cursor()
            
            # Vulnerable SQL query
            query = f"SELECT username, email FROM users WHERE username LIKE '%{user_search}%'"
            print(f"Executing query: {query}")
            
            cursor.execute(query)
            results = cursor.fetchall()
            
            if results:
                user_search_result = "Found users:\n"
                for user in results:
                    user_search_result += f"Username: {user[0]}, Email: {user[1]}\n"
            else:
                user_search_result = "No users found"
                
            conn.close()
            
        except Exception as e:
            user_search_result = f"üö® SQL Error: {str(e)}\n\nThis error indicates a SQL injection vulnerability!"
    
    # Handle CSRF vulnerabilities
    if request.method == 'POST' and 'change_email' in request.form:
        new_email = request.form.get('new_email', '')
        csrf_result = f"Email changed to: {new_email} (This action lacks CSRF protection!)"
    
    if request.method == 'POST' and 'transfer' in request.form:
        amount = request.form.get('amount', '')
        to_account = request.form.get('to_account', '')
        csrf_result = f"Transferred ${amount} to account {to_account} (No CSRF protection!)"
    
    # Handle file upload
    if request.method == 'POST' and 'upload' in request.form:
        filename = request.form.get('filename', '')
        file_content = request.form.get('file_content', '')
        upload_result = f"File '{filename}' uploaded successfully! Content: {file_content[:100]}..."
    
    return render_template_string(HTML_TEMPLATE, 
                                search_term=search_term,
                                comment=comment,
                                username=username,
                                login_result=login_result,
                                user_search=user_search,
                                user_search_result=user_search_result,
                                csrf_result=csrf_result,
                                upload_result=upload_result)

if __name__ == '__main__':
    init_db()
    print("=" * 60)
    print("üéØ VulnApp - Vulnerable Test Application")
    print("=" * 60)
    print("üåê Running on: http://localhost:3000")
    print("‚ö†Ô∏è  This app is INTENTIONALLY VULNERABLE!")
    print("üß™ Use this URL in your vulnerability scanner")
    print("=" * 60)
    
    app.run(debug=True, host='127.0.0.1', port=3000)